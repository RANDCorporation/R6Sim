[{"path":[]},{"path":"https://randcorporation.github.io/R6Sim/CLAUDE.html","id":"commands","dir":"","previous_headings":"","what":"Commands","title":"R6Sim Development Guide","text":"devtools::load_all() - Load package development devtools::document() - Update documentation devtools::build_manual() - Build package manual attachment::att_amend_desc() - Fix dependencies testthat::test_file(\"tests/testthat/test-test_R6Sim.R\") - Run specific test file devtools::test() - Run tests","code":""},{"path":"https://randcorporation.github.io/R6Sim/CLAUDE.html","id":"code-style","dir":"","previous_headings":"","what":"Code Style","title":"R6Sim Development Guide","text":"Classes: PascalCase (R6Sim, R6Experiment) Methods/Functions: snake_case (set_input, run_simulation) Parameters/Variables: dot.case (pop.size, risk.mean, param.id) Imports: Listed DESCRIPTION, managed via attachment package Method Chaining: Object methods use chainable syntax $ operator Data Manipulation: Use dplyr pipes (%>%) functions (bind_rows, bind_cols)","code":""},{"path":"https://randcorporation.github.io/R6Sim/CLAUDE.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"R6Sim Development Guide","text":"Core: R6, assertthat, data.table, dplyr, jsonlite, magrittr, purrr Testing: testthat (>= 3.0.0)","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://randcorporation.github.io/R6Sim/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://randcorporation.github.io/R6Sim/ROADMAP.html","id":null,"dir":"","previous_headings":"","what":"R6Sim Roadmap","title":"R6Sim Roadmap","text":"list features want R6Sim. document outlines organized plan implement features package, create tests feature, establish implementation timeline.","code":""},{"path":"https://randcorporation.github.io/R6Sim/ROADMAP.html","id":"sample-models-and-start-up-projects","dir":"","previous_headings":"","what":"Sample Models and Start-up Projects","title":"R6Sim Roadmap","text":"package include sample simulation models major model formalisms Systems dynamics / ODEs Discrete event simulations Markov models Microsimulation Regression-based Microsimulation Python-based models","code":""},{"path":"https://randcorporation.github.io/R6Sim/ROADMAP.html","id":"model-calibration","dir":"","previous_headings":"","what":"Model Calibration","title":"R6Sim Roadmap","text":"Make integration Bayesian calibration tools (including IMABC) easy users R6Sim facilitate specification priors calibration targets used ABC approaches Base package can include integrators IMABC tools, allowing users set priors calibration targets run automatically","code":""},{"path":"https://randcorporation.github.io/R6Sim/ROADMAP.html","id":"parallelization--integration-with-hpc-workflows","dir":"","previous_headings":"","what":"Parallelization & Integration with HPC Workflows","title":"R6Sim Roadmap","text":"Sequential: Single-threaded execution one computer Parallel: Multi-threaded execution one computer/node HPC: Distributed execution across computing cluster Include pre-made workflows running models clusters Support simple parallel experiments using PBS Slurm batch jobs seamlessly Include EMEWS workflows (workflow solutions) complex parallel tasks like calibration minimal setup overhead","code":""},{"path":"https://randcorporation.github.io/R6Sim/ROADMAP.html","id":"more-flexible-experiments-and-experimental-designs","dir":"","previous_headings":"","what":"More Flexible Experiments and Experimental Designs","title":"R6Sim Roadmap","text":"Create flexible “experiments” can include calibration policy simulation Support calibration “experiments” multiple model versions calibrated data CalibrationExperiment returns one multiple posteriors PolicyExperiment similar current experiment implementation","code":""},{"path":"https://randcorporation.github.io/R6Sim/ROADMAP.html","id":"integration-with-search-methods","dir":"","previous_headings":"","what":"Integration with Search Methods","title":"R6Sim Roadmap","text":"Make experimental design flexible beyond just combining grid designs LHS designs Support search algorithms (single-objective many-objective) Implement general interface search methods allowing iterative addition new methods Start basic search methods available base R Expand specialized algorithms time","code":""},{"path":"https://randcorporation.github.io/R6Sim/ROADMAP.html","id":"python-integration","dir":"","previous_headings":"","what":"Python Integration","title":"R6Sim Roadmap","text":"Simplify integration experimental design Python algorithms Create easier R6Sim wrappers Python-based models built-package support","code":""},{"path":"https://randcorporation.github.io/R6Sim/articles/introduction.html","id":"the-r6sim-model-class","dir":"Articles","previous_headings":"","what":"The R6Sim model class","title":"Introduction to R6Sim","text":"R6Sim class meant represent R6 simulation model. R6Sim model self-contained, instantiated, immediately know simulate model$simulate() function. example R6Sim model: model created, can set inputs run model : model$inputs list contains model inputs, can inspected. Instead passing inputs around parameters functions, can always access model inputs whithin model self$inputs$input_name.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(R6Sim)  Mymodel <- R6::R6Class(   classname = \"Mymodel\",   inherit = R6Sim,   public = list(      sim_res = NULL,      # Custom Initialize function     initialize = function(name) {       super$initialize(name = name)       self$set_input(\"pop.size\", 100)$            set_input(\"risk.mean\", 0.01)$            set_input(\"risk.sd\", 0.001)$            set_input(name = \"trials\",value = 10)              # Can also add a parameter distribution        self$set_param_dist(params_list = list(param_dist_a = data.frame(sample_param = 1, weights = 1)), use_average = T, param_dist_weights = \"weights\")      },      # Sample Simulate function     simulate = function() {        # Create a sample population with some health events:       self$sim_res = data.frame(p.id = 1:self$inputs$pop.size,                            risk = rnorm(n = self$inputs$pop.size, mean = self$inputs$risk.mean, sd = self$inputs$risk.sd)) %>%         mutate(probability.event = 1-exp(-risk)) %>%         mutate(n.events = rbinom(n = 1:self$inputs$pop.size, size = self$inputs$trials, prob = probability.event))              # Let's return the number of events as the key model input       return(data.frame(events = sum(self$sim_res$n.events)))     }   ) )  model <- Mymodel$new(\"test model\")  model$simulate() #>   events #> 1     14 # you can chain methods model$set_input(\"risk.mean\", 0.05)$   simulate() #>   events #> 1     52 model$inputs #> $pop.size #> [1] 100 #>  #> $risk.mean #> [1] 0.05 #>  #> $risk.sd #> [1] 0.001 #>  #> $trials #> [1] 10"},{"path":"https://randcorporation.github.io/R6Sim/articles/introduction.html","id":"the-r6experiment-class","dir":"Articles","previous_headings":"","what":"The R6Experiment class","title":"Introduction to R6Sim","text":"R6Experiment can contain multiple R6Sim models. class can used define experiments run parallel. experiment can multiple models. experiment runs, now can iterate add new inputs, new parameters experiment, add arbitrary number models experiment. see real use case parallel runs, see value--surveillance project.","code":"# Now, the other model will be slightly different my_other_model <- model$clone(deep = T) my_other_model$   set_input(\"risk.sd\", 0.002)  my_other_model$name <- \"high dispersion\"  # Note that my_other_model could be an arbitraryly different class, as long as it also inherits R6Sim  # here, we could change some structural parameter:  experiment = R6Experiment$new(model, my_other_model)  experiment$   set_parameter(parameter_name = \"risk.mean\",experimental_design = \"grid\",values = seq.default(from = 0.01, to = 0.05, by = 0.01))$   set_design()  results <- experiment$run(parallel = F, model_from_cluster_eval = F)  # model.id =1 is the first model passed to experiment, and so on: results %>%   select(model.id, risk.mean, events) #>     model.id risk.mean events #>        <int>     <num>  <int> #>  1:        1      0.01     11 #>  2:        1      0.02     11 #>  3:        1      0.03     33 #>  4:        1      0.04     24 #>  5:        1      0.05     47 #>  6:        2      0.01     11 #>  7:        2      0.02     25 #>  8:        2      0.03     27 #>  9:        2      0.04     43 #> 10:        2      0.05     41"},{"path":"https://randcorporation.github.io/R6Sim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pedro Nascimento de Lima. Maintainer, author.","code":""},{"path":"https://randcorporation.github.io/R6Sim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nascimento de Lima P (2025). R6Sim: R6-based Simulation Modeling Toolkit. R package version 1.1.0, https://randcorporation.github.io/R6Sim/.","code":"@Manual{,   title = {R6Sim: R6-based Simulation Modeling Toolkit},   author = {Pedro {Nascimento de Lima}},   year = {2025},   note = {R package version 1.1.0},   url = {https://randcorporation.github.io/R6Sim/}, }"},{"path":"https://randcorporation.github.io/R6Sim/index.html","id":"r6sim","dir":"","previous_headings":"","what":"R6-based Simulation Modeling Toolkit","title":"R6-based Simulation Modeling Toolkit","text":"R6Sim provides R6 base class simulation modeling analyses using structure encapsulated object-oriented programming provided R6. package allows one create models inherit R6Sim, specify models experimental designs can use multiple models using R6Experiment class.","code":""},{"path":"https://randcorporation.github.io/R6Sim/index.html","id":"why-r6sim","dir":"","previous_headings":"","what":"Why R6Sim","title":"R6-based Simulation Modeling Toolkit","text":"Simulation modeling projects performed R often rely poorly-designed code bases, modeler others don’t visibility model inputs model needs run. Often, tight dependence inputs may live global environment, modeler tends add large set function parameters percolate code passed several layers functions. can problematic one simply wants inspect totality inputs influencing model outputs, inputs live several layers code. One potential cause problems overuse functional programming paradigm cases encapsulated object-oriented paradigm helpful. building models R years, arrived simple pattern model R6 class, another class (call experiment), can include one models, can run models. R6Sim package helps implement modeling pattern.","code":""},{"path":"https://randcorporation.github.io/R6Sim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R6-based Simulation Modeling Toolkit","text":"can install R6Sim like :","code":"# install the remotes package if you do not have it # install.packages(\"remotes\") # install from github: remotes::install_github(\"randcorporation/r6sim\",build_vignettes = T)"},{"path":"https://randcorporation.github.io/R6Sim/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R6-based Simulation Modeling Toolkit","text":"See introductory vignette:","code":"vignette(\"introduction\", package = \"R6Sim\")"},{"path":"https://randcorporation.github.io/R6Sim/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"R6-based Simulation Modeling Toolkit","text":"Reach Pedro Nascimento de Lima questions related repository.","code":""},{"path":"https://randcorporation.github.io/R6Sim/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"R6-based Simulation Modeling Toolkit","text":"Copyright (C) 2024 RAND Corporation. repository released open-source software GPL-3 license. See LICENSE.md file.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing an `R6Experiment` — R6Experiment","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"Manages experimental designs execution R6Sim models.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"models list containing R6Sim objects. blocks number population blocks cases want paralellize individual-level simulations. exp_design data.frame containing one row per experiment run. grid data.frame containing one row per point grid experimental design. lhs table containing one row per point Latin Hypercube experimental design. params data.frame containing one row per parameter set defined params object model included experiment. params_design data.frame containing one row per parameter set defined params object model included experiment. policy_design data.frame containing one row per policy experiment. set_seed T experiment controlling setting seeds. experimental_parameters list containing details experimental parameter. Experimental parameters can either policy levers uncertainties. Defining distinction user.","code":""},{"path":[]},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"R6Experiment$new() R6Experiment$set_parameter() R6Experiment$set_design() R6Experiment$run() R6Experiment$clone()","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"function used initialize `R6Experiment` object. object represents experiment run can encompass multiple models.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"","code":"R6Experiment$new(...)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"... set R6Sim included experiment. One `R6Experiment` can contain multiple models `c19model` class.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"new `R6Experiment` object.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"method-set-parameter-","dir":"Reference","previous_headings":"","what":"Method set_parameter()","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"Set Experimental Parameter Experiment","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"","code":"R6Experiment$set_parameter(   parameter_name,   experimental_design,   values,   min,   max )"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"parameter_name character string defining parameter name. experimental_design Either \"grid\" \"lhs\" Use lhs want create Latin Hypercube Sample within min max bounds provided. Use Grid values use experimental_design = \"grid\". vector including values included grid experimental design. Please use parameters values can converted strings without issues. min use experimental_design = \"lhs\". numeric value indicating minimum bound Latin Hypercube sample. max use experimental_design = \"lhs\". numeric value indicating minimum bound Latin Hypercube sample.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"function constructs experimental_parameter object, appends experimental parameters visible inside model future. Experimental parameters can either uncertainties decision levers. Every parameter defined function can accessed within model using experimental_parameters$param_name.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"method-set-design-","dir":"Reference","previous_headings":"","what":"Method set_design()","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"Set Experimental Design","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"","code":"R6Experiment$set_design(   n_lhs,   blocks = 1,   grid_design_df,   convert_lhs_to_grid = F,   lhs_to_grid_midpoints = 0,   n_reps = 1,   set_seed = T )"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"n_lhs number points Latin Hypercube Sample created. blocks number population blocks use parallelize runs across nodes. grid_design_df data.frame containing pre-existing experimental design used. function use experimental design lieu parameters defined grid, effectively replaces set parameters part grid design. convert_lhs_to_grid Default FALSE. TRUE, function convert LHS parameters \"grid\" parameters. useful one needs test \"corners\" experimental design performing full LHS run. lhs_to_grid_midpoints relevant convert_to_lhs = T. Default value 0. integer determining many points within grid hypercube created parameters converted LHS GRID design. example, convert_lhs_to_grid = T lhs_to_grid_midpoints = 0, function create full factorial design LHS parameters 2^n points. one wants use one midpoint, design 3^n points, . parameter affect parameters orignally defined part grid design values already set. n_reps Number stochastic replications experimental design point. Default 1. set_seed Whether set random seeds reproducibility. TRUE, generates unique seeds replication. Default TRUE.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"Creates two data.frames represent experimental design\" `exp_design` natural history experiments `policy_design` policy experiments. experimental designs created based parameters defined set_parameter functions. experimental design created function useful run typical RDM analysis policy evaluated across LHS deep uncertainties. achieve , define policy lever grid parameter, uncertainty \"lhs\" uncertainty. Natural history uncertainties often already defined model's posterior file also considered. natural history design `n_posterior` runs model experimental design. policy experimental design `blocks` \\* `n_lhs` \\* `n_grid_points` \\* `n_posterior` \\* `n_reps` model experimental design.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"Run Experiment","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"","code":"R6Experiment$run(   n_cores = 3,   parallel = F,   cluster_eval_script = NULL,   model_from_cluster_eval = F,   packages = NULL,   ... )"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"n_cores number cores use parallel whether evaluate run parallel cluster_eval_script Optional path R script sourced parallel process running experiments. Useful model setup happen per process, like: - Loading required packages - Compiling models (e.g. odin models) - Setting simulation parameters/data - Creating model instances use across runs model_from_cluster_eval TRUE, expects model instances created cluster_eval_script. Set TRUE model compilation needed (like odin). packages character vector packages loaded running model parallel. ... additional parameters passed model simulation","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"objects class cloneable method.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"","code":"R6Experiment$clone(deep = FALSE)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing an `R6Experiment` — R6Experiment","text":"deep Whether make deep clone.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs R6Experiment in parallel — R6Experiment_run","title":"Runs R6Experiment in parallel — R6Experiment_run","text":"function useful simulate posterior distribution single model parallel one machine. function used calibrating model useful parallelization across multiple nodes.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs R6Experiment in parallel — R6Experiment_run","text":"","code":"R6Experiment_run(   self,   n_cores,   parallel,   cluster_eval_script = NULL,   model_from_cluster_eval,   cluster_type = \"PSOCK\",   packages = NULL,   ... )"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs R6Experiment in parallel — R6Experiment_run","text":"self experiment object n_cores number cores use parallel whether evaluate run parallel cluster_eval_script path script instantiates necessary functions. often mean sourcing functions external package loading dependencies model. needed parallel = T model_from_cluster_eval T model instantiated cluter eval scripts, F otherwise. Use T using models need compilation (like odin) F otherwise. cluster_type either \"FORK\" \"PSOCK\". packages character vector packages loaded running model paralle. ... additional parameters passed model simulation function.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Experiment_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs R6Experiment in parallel — R6Experiment_run","text":"results data.frame simulations parallel","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"R6Sim: R6-based Simulation Modeling Toolkit — R6Sim-package","title":"R6Sim: R6-based Simulation Modeling Toolkit — R6Sim-package","text":"package implements R6Sim R6Experiment R6 classes, providing encapsulated object-oriented framework simulation modeling studies.","code":""},{"path":[]},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6Sim: R6-based Simulation Modeling Toolkit — R6Sim-package","text":"Maintainer: Pedro Nascimento de Lima plima@rand.org (ORCID)","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for a Simulation Model — R6Sim","title":"R6 Class for a Simulation Model — R6Sim","text":"Base class building simulation models R6. Provides methods managing inputs, parameters, simulation execution.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for a Simulation Model — R6Sim","text":"R6Sim class includes functionality : * Input parameter management * JSON serialization * Parallel execution * Parameter sampling","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 Class for a Simulation Model — R6Sim","text":"name character string representing model name. inputs list model inputs. One can add inputs object set_input function. inputs_table data.frame listing inputs added model. params_df data.frame containing parameters run model. confused params vector withi inputs list, used simulation model. column parameter, row parameter set. set_posterior distribution used set posterior distribution bayesian calibration. sim_results object receive results simulation function. simulate_fn function take parameters self ..., simulate natural history crc returns invisible(self).","code":""},{"path":[]},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for a Simulation Model — R6Sim","text":"R6Sim$new() R6Sim$set_input() R6Sim$get_inputs() R6Sim$to_json() R6Sim$set_inputs_from_json() R6Sim$set_param_dist() R6Sim$simulate() R6Sim$setup_run() R6Sim$clone()","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for a Simulation Model — R6Sim","text":"Create new `R6Sim` object.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$new(name)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"name name model created.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for a Simulation Model — R6Sim","text":"s new `R6Sim` object.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-set-input-","dir":"Reference","previous_headings":"","what":"Method set_input()","title":"R6 Class for a Simulation Model — R6Sim","text":"Set Input","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$set_input(name, value, type = NA_character_)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"name Character string defining input name value Input value. Can single value, list vector. type Optional character string defining input type.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for a Simulation Model — R6Sim","text":"Validates input types maintains input registry. Accepts numeric, character, logical, data.frame list inputs. Type tags enable selective JSON export.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"model$set_input(\"population\", 1000, type = \"parameter\") model$set_input(\"growth_rates\", c(0.01, 0.02), type = \"scenario\") model$set_input(\"settings\", list(iterations = 100), type = \"config\")"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-get-inputs-","dir":"Reference","previous_headings":"","what":"Method get_inputs()","title":"R6 Class for a Simulation Model — R6Sim","text":"Get Inputs","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$get_inputs(source)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"source either path xlsx yaml file, function returns named list new inputs added model.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for a Simulation Model — R6Sim","text":"Use function get model inputs spreadsheet yaml file","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-to-json-","dir":"Reference","previous_headings":"","what":"Method to_json()","title":"R6 Class for a Simulation Model — R6Sim","text":"Converts `R6Sim` JSON string","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$to_json(input_types)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"input_types vector types input include json object.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for a Simulation Model — R6Sim","text":"JSON string containing R6Sim objects exported","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-set-inputs-from-json-","dir":"Reference","previous_headings":"","what":"Method set_inputs_from_json()","title":"R6 Class for a Simulation Model — R6Sim","text":"Set model Inputs JSON string","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$set_inputs_from_json(json)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"json JSON string generated model_to_json function","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for a Simulation Model — R6Sim","text":"Use function set model inputs JSON string. Note posterior distribution included json strong model inputs.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-set-param-dist-","dir":"Reference","previous_headings":"","what":"Method set_param_dist()","title":"R6 Class for a Simulation Model — R6Sim","text":"Set distribution model parameters","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$set_param_dist(   params_list,   param_dist_weights,   cols_to_ignore = NULL,   n_sample = 1000,   use_average = F,   seed = 12345678,   resample = T )"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"params_list named list one data.frames containing distribution model parameters. param_dist_weights character indicating name column contain weights used sampling posterior cols_to_ignore character vector columns name ignore. useful posterior files contain columns parameters inputs model. n_sample size sample take posterior file. use_average T one wants use average value parameters rather mean seed random seed use sampling posterior resample T, samples posterior using posterior weights. Otherwise, returns full posterior, preservers weights.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for a Simulation Model — R6Sim","text":"Use function set distribution model parameters model. useful want sample posterior distribution model parameters.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-simulate-","dir":"Reference","previous_headings":"","what":"Method simulate()","title":"R6 Class for a Simulation Model — R6Sim","text":"Runs simulation model single parameter set.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$simulate(...)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"... set parameters passed function passed along model simulate function.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for a Simulation Model — R6Sim","text":"simulate method used simulate model run. inputs used model already defined function called.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-setup-run-","dir":"Reference","previous_headings":"","what":"Method setup_run()","title":"R6 Class for a Simulation Model — R6Sim","text":"Sets parameters current run.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$setup_run(...)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"... set parameters passed function passed along user natural history function.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for a Simulation Model — R6Sim","text":"function wrapper around user natural history function. passes `self` object parameters provided function.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for a Simulation Model — R6Sim","text":"objects class cloneable method.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"R6Sim$clone(deep = FALSE)"},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for a Simulation Model — R6Sim","text":"deep Whether make deep clone.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/R6Sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for a Simulation Model — R6Sim","text":"","code":"# Create simulation model MyModel <- R6::R6Class(   \"MyModel\",   inherit = R6Sim,   public = list(     initialize = function(name) {       super$initialize(name)       self$set_input(\"population\", 1000)       self$set_input(\"growth_rate\", 0.05)     },     simulate = function(...) {       pop <- self$inputs$population       growth <- self$inputs$growth_rate       results <- pop * (1 + growth)^(1:10)       return(data.frame(year = 1:10, population = results))     }   ) )  model <- MyModel$new(\"pop_model\") results <- model$simulate()   ## ------------------------------------------------ ## Method `R6Sim$set_input` ## ------------------------------------------------  model$set_input(\"population\", 1000, type = \"parameter\") model$set_input(\"growth_rates\", c(0.01, 0.02), type = \"scenario\") model$set_input(\"settings\", list(iterations = 100), type = \"config\")"},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if object is a `R6Experiment`. — is.R6Experiment","title":"Checks if object is a `R6Experiment`. — is.R6Experiment","text":"Checks object `R6Experiment`.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if object is a `R6Experiment`. — is.R6Experiment","text":"","code":"is.R6Experiment(x)"},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if object is a `R6Experiment`. — is.R6Experiment","text":"x object","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if object is a `R6Experiment`. — is.R6Experiment","text":"TRUE object `R6Experiment`","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if object is a `R6Sim`. — is.R6Sim","title":"Checks if object is a `R6Sim`. — is.R6Sim","text":"Checks object `R6Sim`.","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if object is a `R6Sim`. — is.R6Sim","text":"","code":"is.R6Sim(x)"},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if object is a `R6Sim`. — is.R6Sim","text":"x model object","code":""},{"path":"https://randcorporation.github.io/R6Sim/reference/is.R6Sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if object is a `R6Sim`. — is.R6Sim","text":"TRUE object R6Sim","code":""}]
